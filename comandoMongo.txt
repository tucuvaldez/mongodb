mongo    // Inicializacion de mongo

show databases    // Chequeo de bases de datos creadas y disponibles


1) 

- Mensajes

    use mensajes    // Creacion y uso de la coleccion "mensajes"

    db.mensajes.insertMany([
        {
            "email": "email@email.com",
            "message": "Hola",
            "id": 1
        },
        {
            "email": "email@email.com",
            "message": "Hola, como",
            "id": 2
        },
        {
            "email": "email@email.com",
            "message": "Hola, como estas",
            "id": 3
        },
        {
            "email": "email@email.com",
            "message": "Hola, como estas?",
            "id": 4
        },
        
    ])

- Productos

    use productos    // Creacion y uso de la coleccion "productos"

    db.productos.insertMany([
        {
            "title": "Heladera",
            "price": "4567",
            "thumbnail": "www.foto.com/foto",
            "id": 1
        },
        {
            "title": "Lavarropas",
            "price": "3215",
            "thumbnail"": "www.foto.com/foto",
            "id": 2
        },
        {
            "title": "Cocina",
            "price": "2596",
            "thumbnail": "www.foto.com/foto",
            "id": 3
        },
        {
            "title": "Pava Electrica",
            "price"9: "125",
            "thumbnail": "www.foto.com/foto",
            "id": 4
        },
        
    ])


3) Listar todos los productos en cada coleccion

    db.mensajes.find()

    db.productos.find()


4) Mostrar la cantidad de documentos de cada una de ellas

    db.mensajes.countDocuments()

    db.productos.countdocuments()


5) Realizar un CRUD sobra la coleccion de productos

    A) Agregar un producto mas a la coleccion de productos

        db.productos.insertOne({"title":"Cargador Apple", "price":1234, "thumbnail":"www.foto.com/foto", "id":"5"})

    B) Realizar una consulta por nombre de producto especifico:

        i) Listar los productos con precio menor a 1000 pesos

            db.productos.find({"price" : {$lt : 1000}})

        ii) Listar los productos con precio entre los 1000 a 3000 pesos

            db.productos.find({"price" : {$gte : 1000 , $lte : 3000}})

        iii) Listar los productos con precio mayor a 3000 pesos

            db.productos.find({"price" : {$gt : 3000}})

        iv) Realizar una consulta que traiga sólo el nombre del tercer producto más barato

            db.productos.find({},{_id:0,"name":1}).sort({"price":1}).limit(1).skip(2)

    C) Hacer una actualización sobre todos los productos, agregando el campo stock a todos
    ellos con un valor de 100.

        db.productos.updateMany({}, {$set :{"stock" : 100}})
        
        db.productos.find()

    D) Cambiar el stock a cero de los productos con precios mayores a 4000 pesos.

        db.productos.updateMany({"price" : {$gt : 4000}}, {$set :{"stock" : 0}})


    E) Borrar los productos con precio menor a 1000 pesos

        db.productos.deleteMany({"price" : {$lt : 1000}})


6) Crear un usuario 'pepe' clave: 'asd456' que sólo pueda leer la base de datos ecommerce.
Verificar que pepe no pueda cambiar la información.

    use admin

    db.createUser({
        user : "pepe",
        pwd : "asd456",
        roles : [
            {role :"read", db:"products"},
            {role :"read", db:"mensajes"}
    ]})